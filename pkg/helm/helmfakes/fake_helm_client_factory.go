// Code generated by counterfeiter. DO NOT EDIT.
package helmfakes

import (
	"sync"

	"github.com/cf-platform-eng/kibosh/pkg/helm"
	"github.com/cf-platform-eng/kibosh/pkg/k8s"
)

type FakeHelmClientFactory struct {
	HelmClientStub        func(k8s.Cluster) helm.MyHelmClient
	helmClientMutex       sync.RWMutex
	helmClientArgsForCall []struct {
		arg1 k8s.Cluster
	}
	helmClientReturns struct {
		result1 helm.MyHelmClient
	}
	helmClientReturnsOnCall map[int]struct {
		result1 helm.MyHelmClient
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHelmClientFactory) HelmClient(arg1 k8s.Cluster) helm.MyHelmClient {
	fake.helmClientMutex.Lock()
	ret, specificReturn := fake.helmClientReturnsOnCall[len(fake.helmClientArgsForCall)]
	fake.helmClientArgsForCall = append(fake.helmClientArgsForCall, struct {
		arg1 k8s.Cluster
	}{arg1})
	fake.recordInvocation("HelmClient", []interface{}{arg1})
	fake.helmClientMutex.Unlock()
	if fake.HelmClientStub != nil {
		return fake.HelmClientStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.helmClientReturns
	return fakeReturns.result1
}

func (fake *FakeHelmClientFactory) HelmClientCallCount() int {
	fake.helmClientMutex.RLock()
	defer fake.helmClientMutex.RUnlock()
	return len(fake.helmClientArgsForCall)
}

func (fake *FakeHelmClientFactory) HelmClientCalls(stub func(k8s.Cluster) helm.MyHelmClient) {
	fake.helmClientMutex.Lock()
	defer fake.helmClientMutex.Unlock()
	fake.HelmClientStub = stub
}

func (fake *FakeHelmClientFactory) HelmClientArgsForCall(i int) k8s.Cluster {
	fake.helmClientMutex.RLock()
	defer fake.helmClientMutex.RUnlock()
	argsForCall := fake.helmClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHelmClientFactory) HelmClientReturns(result1 helm.MyHelmClient) {
	fake.helmClientMutex.Lock()
	defer fake.helmClientMutex.Unlock()
	fake.HelmClientStub = nil
	fake.helmClientReturns = struct {
		result1 helm.MyHelmClient
	}{result1}
}

func (fake *FakeHelmClientFactory) HelmClientReturnsOnCall(i int, result1 helm.MyHelmClient) {
	fake.helmClientMutex.Lock()
	defer fake.helmClientMutex.Unlock()
	fake.HelmClientStub = nil
	if fake.helmClientReturnsOnCall == nil {
		fake.helmClientReturnsOnCall = make(map[int]struct {
			result1 helm.MyHelmClient
		})
	}
	fake.helmClientReturnsOnCall[i] = struct {
		result1 helm.MyHelmClient
	}{result1}
}

func (fake *FakeHelmClientFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.helmClientMutex.RLock()
	defer fake.helmClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHelmClientFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ helm.HelmClientFactory = new(FakeHelmClientFactory)
